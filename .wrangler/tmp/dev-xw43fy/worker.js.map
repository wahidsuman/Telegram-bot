{
  "version": 3,
  "sources": ["../bundle-edp9We/checked-fetch.js", "../../../src/worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-edp9We/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-edp9We/middleware-loader.entry.ts"],
  "sourceRoot": "/workspace/.wrangler/tmp/dev-xw43fy",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/// <reference types=\"@cloudflare/workers-types\" />\n\ninterface Env {\n  STATE: KVNamespace;\n  TELEGRAM_BOT_TOKEN: string;\n  TARGET_GROUP_ID: string;\n  ADMIN_CHAT_ID: string;\n  WEBHOOK_SECRET: string;\n  TZ: string;\n}\n\ninterface Question {\n  question: string;\n  options: {\n    A: string;\n    B: string;\n    C: string;\n    D: string;\n  };\n  answer: 'A' | 'B' | 'C' | 'D';\n  explanation: string;\n}\n\ninterface UserStats {\n  cnt: number;\n  correct: number;\n}\n\ninterface DayStats {\n  total: number;\n  users: Record<string, UserStats>;\n}\n\ninterface AdminState {\n  mode: 'normal' | 'viewing_questions' | 'deleting_question' | 'editing_question' | 'sending_to_group';\n  page?: number;\n  questionIndex?: number;\n}\n\ninterface TelegramMessage {\n  message_id: number;\n  from?: {\n    id: number;\n    first_name: string;\n    last_name?: string;\n    username?: string;\n  };\n  chat: {\n    id: number;\n    type: string;\n  };\n  text?: string;\n  document?: {\n    file_id: string;\n    file_name?: string;\n  };\n  photo?: Array<{\n    file_id: string;\n    file_unique_id: string;\n    width: number;\n    height: number;\n    file_size?: number;\n  }>;\n}\n\ninterface TelegramCallbackQuery {\n  id: string;\n  from: {\n    id: number;\n    first_name: string;\n    last_name?: string;\n    username?: string;\n  };\n  message?: {\n    message_id: number;\n    chat: {\n      id: number;\n    };\n  };\n  data?: string;\n}\n\ninterface TelegramUpdate {\n  update_id: number;\n  message?: TelegramMessage;\n  callback_query?: TelegramCallbackQuery;\n}\n\n// Utility functions\nfunction esc(str: string): string {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;');\n}\n\nasync function getJSON<T>(kv: KVNamespace, key: string, defaultValue: T): Promise<T> {\n  try {\n    const value = await kv.get(key);\n    return value ? JSON.parse(value) : defaultValue;\n  } catch {\n    return defaultValue;\n  }\n}\n\nasync function putJSON(kv: KVNamespace, key: string, obj: any): Promise<void> {\n  await kv.put(key, JSON.stringify(obj));\n}\n\nfunction getCurrentDate(tz: string): string {\n  const now = new Date();\n  const formatter = new Intl.DateTimeFormat('en-CA', {\n    timeZone: tz,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  });\n  return formatter.format(now);\n}\n\nfunction getCurrentMonth(tz: string): string {\n  const now = new Date();\n  const formatter = new Intl.DateTimeFormat('en-CA', {\n    timeZone: tz,\n    year: 'numeric',\n    month: '2-digit'\n  });\n  return formatter.format(now);\n}\n\nasync function sendMessage(token: string, chatId: string | number, text: string, options?: any): Promise<any> {\n  const url = `https://api.telegram.org/bot${token}/sendMessage`;\n  const body = {\n    chat_id: chatId,\n    text: text,\n    parse_mode: 'HTML',\n    ...options\n  };\n  \n  const response = await fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body)\n  });\n  \n  return response.json();\n}\n\nasync function answerCallbackQuery(token: string, queryId: string, text?: string, showAlert?: boolean): Promise<any> {\n  const url = `https://api.telegram.org/bot${token}/answerCallbackQuery`;\n  const body = {\n    callback_query_id: queryId,\n    text: text,\n    show_alert: showAlert || false\n  };\n  \n  const response = await fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body)\n  });\n  \n  return response.json();\n}\n\nasync function getFile(token: string, fileId: string): Promise<any> {\n  const url = `https://api.telegram.org/bot${token}/getFile`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ file_id: fileId })\n  });\n  \n  return response.json();\n}\n\nasync function downloadFile(token: string, filePath: string): Promise<string> {\n  const url = `https://api.telegram.org/file/bot${token}/${filePath}`;\n  const response = await fetch(url);\n  return response.text();\n}\n\nasync function ensureKeys(kv: KVNamespace): Promise<void> {\n  const questions = await getJSON<Question[]>(kv, 'questions', []);\n  if (questions.length === 0) {\n    await putJSON(kv, 'questions', []);\n  }\n}\n\nasync function initializeBotIfNeeded(kv: KVNamespace, token: string, targetGroupId: string): Promise<void> {\n  const questions = await getJSON<Question[]>(kv, 'questions', []);\n  if (questions.length === 0) {\n    // Add sample question to bootstrap the system\n    const sampleQuestion: Question = {\n      question: \"Welcome to Prepladder MCQ Bot! Which programming paradigm focuses on functions as first-class citizens?\",\n      options: {\n        A: \"Object-Oriented Programming\",\n        B: \"Functional Programming\",\n        C: \"Procedural Programming\",\n        D: \"Declarative Programming\"\n      },\n      answer: \"B\",\n      explanation: \"Functional programming treats functions as first-class citizens, allowing them to be assigned to variables, passed as arguments, and returned from other functions.\"\n    };\n    \n    await putJSON(kv, 'questions', [sampleQuestion]);\n  }\n  \n  // Check if we need to initialize the index\n  const indexKey = `idx:${targetGroupId}`;\n  const currentIndex = await getJSON<number>(kv, indexKey, -1);\n  if (currentIndex === -1) {\n    await putJSON(kv, indexKey, 0);\n    // Post the first question immediately to start the cycle\n    try {\n      await postNext(kv, token, targetGroupId);\n    } catch (error) {\n      console.log('Error posting initial question:', error);\n    }\n  }\n}\n\nasync function incrementStats(kv: KVNamespace, userId: number, isCorrect: boolean, tz: string): Promise<void> {\n  const userIdStr = userId.toString();\n  const today = getCurrentDate(tz);\n  const month = getCurrentMonth(tz);\n  \n  // Update daily stats\n  const dailyKey = `stats:daily:${today}`;\n  const dailyStats = await getJSON<DayStats>(kv, dailyKey, { total: 0, users: {} });\n  \n  dailyStats.total += 1;\n  if (!dailyStats.users[userIdStr]) {\n    dailyStats.users[userIdStr] = { cnt: 0, correct: 0 };\n  }\n  dailyStats.users[userIdStr].cnt += 1;\n  if (isCorrect) {\n    dailyStats.users[userIdStr].correct += 1;\n  }\n  \n  await putJSON(kv, dailyKey, dailyStats);\n  \n  // Update monthly stats\n  const monthlyKey = `stats:monthly:${month}`;\n  const monthlyStats = await getJSON<DayStats>(kv, monthlyKey, { total: 0, users: {} });\n  \n  monthlyStats.total += 1;\n  if (!monthlyStats.users[userIdStr]) {\n    monthlyStats.users[userIdStr] = { cnt: 0, correct: 0 };\n  }\n  monthlyStats.users[userIdStr].cnt += 1;\n  if (isCorrect) {\n    monthlyStats.users[userIdStr].correct += 1;\n  }\n  \n  await putJSON(kv, monthlyKey, monthlyStats);\n}\n\nasync function postNext(kv: KVNamespace, token: string, chatId: string): Promise<void> {\n  const questions = await getJSON<Question[]>(kv, 'questions', []);\n  \n  if (questions.length === 0) {\n    console.log('No questions available');\n    return;\n  }\n  \n  const indexKey = `idx:${chatId}`;\n  const recentKey = `recent:${chatId}`;\n  const currentIndex = await getJSON<number>(kv, indexKey, 0);\n  const recentQuestions = await getJSON<number[]>(kv, recentKey, []);\n  \n  // Ensure we don't go out of bounds if questions were removed\n  let safeIndex = currentIndex % questions.length;\n  \n  // If we have more than 5 questions, avoid recently sent ones\n  if (questions.length > 5) {\n    let attempts = 0;\n    while (recentQuestions.includes(safeIndex) && attempts < questions.length) {\n      safeIndex = (safeIndex + 1) % questions.length;\n      attempts++;\n    }\n  }\n  \n  const question = questions[safeIndex];\n  const nextIndex = (safeIndex + 1) % questions.length;\n  \n  // Update recent questions list (keep last 5)\n  const updatedRecent = [safeIndex, ...recentQuestions.filter(idx => idx !== safeIndex)].slice(0, Math.min(5, Math.floor(questions.length / 2)));\n  \n  await putJSON(kv, indexKey, nextIndex);\n  await putJSON(kv, recentKey, updatedRecent);\n  \n  // Add timestamp and question ID to make each question unique\n  const now = new Date();\n  const indianTime = new Intl.DateTimeFormat('en-IN', {\n    timeZone: 'Asia/Kolkata',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: true\n  }).format(now);\n  const questionId = `${safeIndex}_${Date.now()}`;\n  \n  const text = `\uD83E\uDDE0 Hourly MCQ #${safeIndex + 1}\\n\\n${esc(question.question)}\\n\\nA) ${esc(question.options.A)}\\nB) ${esc(question.options.B)}\\nC) ${esc(question.options.C)}\\nD) ${esc(question.options.D)}\\n\\n\u23F0 Posted: ${indianTime} IST`;\n  \n  const keyboard = {\n    inline_keyboard: [[\n      { text: 'A', callback_data: `ans:${questionId}:A` },\n      { text: 'B', callback_data: `ans:${questionId}:B` },\n      { text: 'C', callback_data: `ans:${questionId}:C` },\n      { text: 'D', callback_data: `ans:${questionId}:D` }\n    ]]\n  };\n  \n  await sendMessage(token, chatId, text, { reply_markup: keyboard });\n}\n\nfunction validateQuestion(q: any): q is Question {\n  return (\n    typeof q === 'object' &&\n    typeof q.question === 'string' &&\n    typeof q.options === 'object' &&\n    typeof q.options.A === 'string' &&\n    typeof q.options.B === 'string' &&\n    typeof q.options.C === 'string' &&\n    typeof q.options.D === 'string' &&\n    typeof q.answer === 'string' &&\n    ['A', 'B', 'C', 'D'].includes(q.answer) &&\n    typeof q.explanation === 'string'\n  );\n}\n\nfunction trimQuestion(q: any): Question {\n  return {\n    question: q.question.trim(),\n    options: {\n      A: q.options.A.trim(),\n      B: q.options.B.trim(),\n      C: q.options.C.trim(),\n      D: q.options.D.trim()\n    },\n    answer: q.answer,\n    explanation: q.explanation.trim()\n  };\n}\n\nasync function uploadQuestionsFromText(kv: KVNamespace, content: string, targetGroupId: string): Promise<{ uploaded: number; total: number; sent: number; unsent: number }> {\n  let newQuestions: Question[] = [];\n  \n  try {\n    // Try parsing as JSON array first\n    const parsed = JSON.parse(content);\n    if (Array.isArray(parsed)) {\n      newQuestions = parsed;\n    } else {\n      newQuestions = [parsed];\n    }\n  } catch {\n    // Try parsing as JSONL\n    const lines = content.split('\\n').filter(line => line.trim());\n    for (const line of lines) {\n      try {\n        const q = JSON.parse(line);\n        newQuestions.push(q);\n      } catch {\n        throw new Error('Invalid JSON format');\n      }\n    }\n  }\n  \n  // Validate and trim questions\n  const validQuestions: Question[] = [];\n  for (const q of newQuestions) {\n    if (validateQuestion(q)) {\n      validQuestions.push(trimQuestion(q));\n    }\n  }\n  \n  if (validQuestions.length === 0) {\n    throw new Error('No valid questions found');\n  }\n  \n  const existingQuestions = await getJSON<Question[]>(kv, 'questions', []);\n  const allQuestions = [...existingQuestions, ...validQuestions];\n  \n  await putJSON(kv, 'questions', allQuestions);\n  \n  // Get current index to calculate sent vs unsent\n  const indexKey = `idx:${targetGroupId}`;\n  const currentIndex = await getJSON<number>(kv, indexKey, 0);\n  \n  return {\n    uploaded: validQuestions.length,\n    total: allQuestions.length,\n    sent: currentIndex,\n    unsent: Math.max(0, allQuestions.length - currentIndex)\n  };\n}\n\nasync function uploadQuestionsFromFile(kv: KVNamespace, token: string, fileId: string, targetGroupId: string): Promise<{ uploaded: number; total: number; sent: number; unsent: number }> {\n  const fileInfo = await getFile(token, fileId);\n  \n  if (!fileInfo.ok) {\n    throw new Error('Failed to get file info');\n  }\n  \n  const content = await downloadFile(token, fileInfo.result.file_path);\n  return await uploadQuestionsFromText(kv, content, targetGroupId);\n}\n\nasync function formatDailyReport(kv: KVNamespace, date: string): Promise<string> {\n  const stats = await getJSON<DayStats>(kv, `stats:daily:${date}`, { total: 0, users: {} });\n  \n  const uniqueUsers = Object.keys(stats.users).length;\n  const totalAnswers = stats.total;\n  const avgPerUser = uniqueUsers > 0 ? (totalAnswers / uniqueUsers).toFixed(1) : '0';\n  \n  let report = `\uD83D\uDCCA Daily MCQ Report - ${date}\\n\\n`;\n  report += `\uD83D\uDC65 Unique Users: ${uniqueUsers}\\n`;\n  report += `\uD83D\uDCDD Total Answers: ${totalAnswers}\\n`;\n  report += `\uD83D\uDCC8 Average per User: ${avgPerUser}\\n\\n`;\n  \n  if (uniqueUsers > 0) {\n    const topUsers = Object.entries(stats.users)\n      .sort(([,a], [,b]) => b.cnt - a.cnt)\n      .slice(0, 5);\n    \n    report += `Top Users Today:\\n`;\n    for (const [userId, userStats] of topUsers) {\n      const accuracy = userStats.cnt > 0 ? ((userStats.correct / userStats.cnt) * 100).toFixed(0) : '0';\n      report += `\u2022 User ${userId}: ${userStats.cnt} questions, ${accuracy}% accuracy\\n`;\n    }\n  }\n  \n  return report;\n}\n\nasync function formatMonthlyReport(kv: KVNamespace, yyyyMM: string): Promise<string> {\n  const stats = await getJSON<DayStats>(kv, `stats:monthly:${yyyyMM}`, { total: 0, users: {} });\n  \n  const uniqueUsers = Object.keys(stats.users).length;\n  const totalAnswers = stats.total;\n  const avgPerUser = uniqueUsers > 0 ? (totalAnswers / uniqueUsers).toFixed(1) : '0';\n  \n  let report = `\uD83D\uDCCA Monthly MCQ Report - ${yyyyMM}\\n\\n`;\n  report += `\uD83D\uDC65 Unique Users: ${uniqueUsers}\\n`;\n  report += `\uD83D\uDCDD Total Answers: ${totalAnswers}\\n`;\n  report += `\uD83D\uDCC8 Average per User: ${avgPerUser}\\n\\n`;\n  \n  if (uniqueUsers > 0) {\n    const topUsers = Object.entries(stats.users)\n      .sort(([,a], [,b]) => b.cnt - a.cnt)\n      .slice(0, 5);\n    \n    report += `Top Users This Month:\\n`;\n    for (const [userId, userStats] of topUsers) {\n      const accuracy = userStats.cnt > 0 ? ((userStats.correct / userStats.cnt) * 100).toFixed(0) : '0';\n      report += `\u2022 User ${userId}: ${userStats.cnt} questions, ${accuracy}% accuracy\\n`;\n    }\n  }\n  \n  return report;\n}\n\nasync function formatQuestionsList(kv: KVNamespace, page: number = 0, pageSize: number = 5): Promise<{ text: string; hasMore: boolean; totalPages: number }> {\n  const questions = await getJSON<Question[]>(kv, 'questions', []);\n  \n  if (questions.length === 0) {\n    return { text: '\uD83D\uDCDD No questions in database yet.', hasMore: false, totalPages: 0 };\n  }\n  \n  const totalPages = Math.ceil(questions.length / pageSize);\n  const startIdx = page * pageSize;\n  const endIdx = Math.min(startIdx + pageSize, questions.length);\n  const pageQuestions = questions.slice(startIdx, endIdx);\n  \n  let text = `\uD83D\uDCDA Questions Database (Page ${page + 1}/${totalPages})\\n`;\n  text += `Total: ${questions.length} questions\\n\\n`;\n  \n  for (let i = 0; i < pageQuestions.length; i++) {\n    const globalIdx = startIdx + i;\n    const q = pageQuestions[i];\n    const shortQuestion = q.question.length > 60 ? q.question.substring(0, 60) + '...' : q.question;\n    text += `${globalIdx + 1}. ${shortQuestion}\\n`;\n    text += `   Answer: ${q.answer}) ${q.options[q.answer]}\\n\\n`;\n  }\n  \n  return {\n    text,\n    hasMore: endIdx < questions.length,\n    totalPages\n  };\n}\n\nasync function deleteQuestion(kv: KVNamespace, questionIndex: number, targetGroupId: string): Promise<{ success: boolean; message: string }> {\n  const questions = await getJSON<Question[]>(kv, 'questions', []);\n  \n  if (questionIndex < 0 || questionIndex >= questions.length) {\n    return { success: false, message: 'Invalid question index' };\n  }\n  \n  const deletedQuestion = questions[questionIndex];\n  questions.splice(questionIndex, 1);\n  await putJSON(kv, 'questions', questions);\n  \n  // Adjust the current index if needed\n  const indexKey = `idx:${targetGroupId}`;\n  const currentIndex = await getJSON<number>(kv, indexKey, 0);\n  if (currentIndex > questions.length) {\n    await putJSON(kv, indexKey, questions.length > 0 ? 0 : 0);\n  }\n  \n  // Clear recent questions cache to avoid stale indices\n  const recentKey = `recent:${targetGroupId}`;\n  await putJSON(kv, recentKey, []);\n  \n  const shortQuestion = deletedQuestion.question.length > 50 ? \n    deletedQuestion.question.substring(0, 50) + '...' : deletedQuestion.question;\n  \n  return { \n    success: true, \n    message: `\u2705 Deleted question #${questionIndex + 1}: \"${shortQuestion}\"\\n\\n\uD83D\uDCCA ${questions.length} questions remaining in database.` \n  };\n}\n\nasync function sendToGroup(token: string, groupId: string, message: TelegramMessage): Promise<void> {\n  if (message.text) {\n    // Send text message\n    await sendMessage(token, groupId, `\uD83D\uDCE2 Admin Message:\\n\\n${message.text}`);\n  } else if (message.photo && message.photo.length > 0) {\n    // Send photo (use the largest size)\n    const photo = message.photo[message.photo.length - 1];\n    const url = `https://api.telegram.org/bot${token}/sendPhoto`;\n    const body = {\n      chat_id: groupId,\n      photo: photo.file_id,\n      caption: message.text ? `\uD83D\uDCE2 Admin: ${message.text}` : '\uD83D\uDCE2 Photo from admin'\n    };\n    \n    await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body)\n    });\n  } else if (message.document) {\n    // Send document\n    const url = `https://api.telegram.org/bot${token}/sendDocument`;\n    const body = {\n      chat_id: groupId,\n      document: message.document.file_id,\n      caption: message.text ? `\uD83D\uDCE2 Admin: ${message.text}` : '\uD83D\uDCE2 Document from admin'\n    };\n    \n    await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body)\n    });\n  }\n}\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url);\n    \n    try {\n      if (url.pathname === '/webhook' && request.method === 'POST') {\n        const secretHeader = request.headers.get('X-Telegram-Bot-Api-Secret-Token');\n        if (secretHeader !== env.WEBHOOK_SECRET) {\n          return new Response('Unauthorized', { status: 401 });\n        }\n        \n        const update: TelegramUpdate = await request.json();\n        \n        await ensureKeys(env.STATE);\n        await initializeBotIfNeeded(env.STATE, env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID);\n        \n        if (update.message) {\n          const message = update.message;\n          const chatId = message.chat.id;\n          const userId = message.from?.id;\n          \n          if (chatId.toString() === env.ADMIN_CHAT_ID) {\n            // Admin commands\n            if (message.text === '/start') {\n              // Reset admin state\n              await putJSON(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n              \n              const keyboard = {\n                inline_keyboard: [\n                  [{ text: '\uD83D\uDCE4 Upload Questions', callback_data: 'admin:upload' }],\n                  [{ text: '\uD83D\uDCDA Manage Questions', callback_data: 'admin:manage' }],\n                  [{ text: '\uD83D\uDCE2 Send to Group', callback_data: 'admin:send' }],\n                  [{ text: '\uD83D\uDCCA Daily Report', callback_data: 'admin:daily' }],\n                  [{ text: '\uD83D\uDCC8 Monthly Report', callback_data: 'admin:monthly' }]\n                ]\n              };\n              \n              await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, '\uD83E\uDD16 Admin Panel\\n\\nChoose an action:', { reply_markup: keyboard });\n            } else if (message.document) {\n              // Check admin state to determine how to handle the document\n              const adminState = await getJSON<AdminState>(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n              \n              if (adminState.mode === 'sending_to_group') {\n                // Admin is sending a document to the group\n                try {\n                  await sendToGroup(env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID, message);\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, '\u2705 Document sent to group successfully!');\n                  await putJSON(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n                } catch (error) {\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, `\u274C Error sending document to group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                }\n              } else {\n                // Normal mode - handle as question upload\n                try {\n                  console.log('Processing file upload from admin:', chatId);\n                  const result = await uploadQuestionsFromFile(env.STATE, env.TELEGRAM_BOT_TOKEN, message.document.file_id, env.TARGET_GROUP_ID);\n                  \n                  const responseMessage = `\u2705 Successfully uploaded ${result.uploaded} questions!\\n\\n\uD83D\uDCCA Database Status:\\n\u2022 Total questions in database: ${result.total}\\n\u2022 Questions already sent: ${result.sent}\\n\u2022 Questions remaining unsent: ${result.unsent}\\n\\n\uD83D\uDCA1 Tip: You can also send JSON text directly (no file needed)!`;\n                  \n                  console.log('Sending response to admin:', responseMessage);\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, responseMessage);\n                  \n                } catch (error) {\n                  console.error('File upload error:', error);\n                  const errorMessage = `\u274C Error uploading questions: ${error instanceof Error ? error.message : 'Unknown error'}`;\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, errorMessage);\n                }\n              }\n            } else if (message.text && message.text !== '/start') {\n              // Check admin state to determine how to handle the message\n              const adminState = await getJSON<AdminState>(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n              \n              if (adminState.mode === 'sending_to_group') {\n                // Admin is sending a message to the group\n                try {\n                  await sendToGroup(env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID, message);\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, '\u2705 Message sent to group successfully!');\n                  await putJSON(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n                } catch (error) {\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, `\u274C Error sending to group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                }\n              } else if (adminState.mode === 'deleting_question') {\n                // Admin is entering question number to delete\n                const questionNum = parseInt(message.text.trim());\n                if (isNaN(questionNum) || questionNum < 1) {\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, '\u274C Please enter a valid question number (e.g., 1, 2, 3...)');\n                  return new Response('OK');\n                }\n                \n                const result = await deleteQuestion(env.STATE, questionNum - 1, env.TARGET_GROUP_ID);\n                await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, result.message);\n                await putJSON(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n              } else {\n                // Normal mode - try to upload as JSON\n                try {\n                  console.log('Processing JSON text from admin:', chatId);\n                  const result = await uploadQuestionsFromText(env.STATE, message.text, env.TARGET_GROUP_ID);\n                  \n                  const responseMessage = `\u2705 Successfully uploaded ${result.uploaded} questions from text!\\n\\n\uD83D\uDCCA Database Status:\\n\u2022 Total questions in database: ${result.total}\\n\u2022 Questions already sent: ${result.sent}\\n\u2022 Questions remaining unsent: ${result.unsent}\\n\\n\uD83D\uDD04 Next question will be #${result.sent + 1}`;\n                  \n                  console.log('Sending response to admin:', responseMessage);\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, responseMessage);\n                  \n                } catch (error) {\n                  console.error('JSON text upload error:', error);\n                  const errorMessage = `\u274C Error uploading questions from text: ${error instanceof Error ? error.message : 'Unknown error'}\\n\\n\uD83D\uDCA1 Make sure to send valid JSON format:\\n[{\"question\":\"...\", \"options\":{\"A\":\"...\", \"B\":\"...\", \"C\":\"...\", \"D\":\"...\"}, \"answer\":\"A\", \"explanation\":\"...\"}]`;\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, errorMessage);\n                }\n              }\n            } else if (message.photo) {\n              // Handle photo upload for sending to group\n              const adminState = await getJSON<AdminState>(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n              \n              if (adminState.mode === 'sending_to_group') {\n                try {\n                  await sendToGroup(env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID, message);\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, '\u2705 Photo sent to group successfully!');\n                  await putJSON(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n                } catch (error) {\n                  await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, `\u274C Error sending photo to group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                }\n              } else {\n                await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, '\uD83D\uDCF7 To send photos to the group, use the \"Send to Group\" feature from the admin panel.');\n              }\n            }\n          } else if (message.chat.type === 'private') {\n            // Non-admin private message\n            const keyboard = {\n              inline_keyboard: [\n                [{ text: 'Get Code', callback_data: 'coupon:copy' }],\n                [{ text: 'Bargain', callback_data: 'coupon:bargain' }]\n              ]\n            };\n            \n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, \n              'Here For Best Prepladder Discount Coupon? Click Below -', \n              { reply_markup: keyboard });\n          }\n        } else if (update.callback_query) {\n          const query = update.callback_query;\n          const data = query.data || '';\n          const userId = query.from.id;\n          const chatId = query.message?.chat.id;\n          \n          if (data.startsWith('ans:')) {\n            // MCQ answer - handle both old format (qid) and new format (qid_timestamp)\n            const [, qidStr, answer] = data.split(':');\n            const qid = parseInt(qidStr.split('_')[0]); // Extract question index from questionId\n            \n            const questions = await getJSON<Question[]>(env.STATE, 'questions', []);\n            if (qid >= 0 && qid < questions.length) {\n              const question = questions[qid];\n              const isCorrect = answer === question.answer;\n              \n              await incrementStats(env.STATE, userId, isCorrect, env.TZ || 'Asia/Kolkata');\n              \n              // Create popup with correct/wrong, explanation, and discount message\n              let explanation = question.explanation;\n              if (explanation.length > 120) {\n                explanation = explanation.substring(0, 120) + '...';\n              }\n              \n              const resultText = isCorrect ? '\u2705 Correct!' : '\u274C Wrong!';\n              const correctAnswer = `\\n\\n\uD83C\uDFAF Correct Answer: ${question.answer}) ${question.options[question.answer]}`;\n              const popup = `${resultText}${correctAnswer}\\n\\n${explanation}\\n\\n(to know more prepladder Discounts text me)`;\n              \n              await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id, popup, true);\n            } else {\n              await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id, '\u274C Question not found', true);\n            }\n          } else if (data === 'coupon:copy') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id, 'P650 coupon code copied');\n            \n            // Send the coupon code\n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, 'P650');\n            \n            // Send follow-up message\n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, \n              'Thank you for Purchasing With Our Code P650. If You want more discount, you can always click on the bargain button');\n            \n            // Notify admin with username\n            const userName = `${query.from.first_name}${query.from.last_name ? ' ' + query.from.last_name : ''}`;\n            const username = query.from.username ? `@${query.from.username}` : '\u2014';\n            await sendMessage(env.TELEGRAM_BOT_TOKEN, env.ADMIN_CHAT_ID, \n              `\uD83D\uDCB0 Code Used: P650\\n\\nUser: ${userName}\\nUsername: ${username}\\nUser ID: ${userId}\\n\\nUser has copied the discount code!`);\n              \n          } else if (data === 'coupon:bargain') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id, \n              'Stay Still Admin Will reply shortly, be ready with your bargaining skills\u2026\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06', true);\n            \n            // Notify admin\n            const userName = `${query.from.first_name}${query.from.last_name ? ' ' + query.from.last_name : ''}`;\n            const username = query.from.username ? `@${query.from.username}` : '\u2014';\n            \n            const bargainMsg = `\uD83E\uDD1D Bargain Request\\n\\nUser: ${userName}\\nUsername: ${username}\\nUser ID: ${userId}\\n\\nReady to negotiate discount!`;\n            await sendMessage(env.TELEGRAM_BOT_TOKEN, env.ADMIN_CHAT_ID, bargainMsg);\n            \n          } else if (data === 'admin:upload') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id);\n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, \n              '\uD83D\uDCE4 Upload Questions\\n\\nYou can upload questions in two ways:\\n\\n1\uFE0F\u20E3 **JSON File**: Send a .json file\\n2\uFE0F\u20E3 **JSON Text**: Send JSON directly as a message\\n\\nFormat: Array of objects or JSONL (one object per line)\\n\\nExample:\\n[{\"question\":\"What is 2+2?\", \"options\":{\"A\":\"3\", \"B\":\"4\", \"C\":\"5\", \"D\":\"6\"}, \"answer\":\"B\", \"explanation\":\"2+2=4\"}]');\n              \n          } else if (data === 'admin:daily') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id);\n            const today = getCurrentDate(env.TZ || 'Asia/Kolkata');\n            const report = await formatDailyReport(env.STATE, today);\n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, report);\n            \n          } else if (data === 'admin:monthly') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id);\n            const month = getCurrentMonth(env.TZ || 'Asia/Kolkata');\n            const report = await formatMonthlyReport(env.STATE, month);\n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, report);\n            \n          } else if (data === 'admin:manage') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id);\n            const questionsList = await formatQuestionsList(env.STATE, 0);\n            \n            const keyboard = {\n              inline_keyboard: [\n                [{ text: '\uD83D\uDC40 View Questions', callback_data: 'admin:view:0' }],\n                [{ text: '\uD83D\uDDD1\uFE0F Delete Question', callback_data: 'admin:delete_mode' }],\n                [{ text: '\uD83D\uDD19 Back to Main', callback_data: 'admin:main' }]\n              ]\n            };\n            \n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, `\uD83D\uDCDA Question Management\\n\\n${questionsList.text}`, { reply_markup: keyboard });\n            \n          } else if (data === 'admin:send') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id);\n            await putJSON(env.STATE, `admin_state:${chatId}`, { mode: 'sending_to_group' });\n            \n            const keyboard = {\n              inline_keyboard: [\n                [{ text: '\u274C Cancel', callback_data: 'admin:main' }]\n              ]\n            };\n            \n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, \n              '\uD83D\uDCE2 Send to Group Mode\\n\\nSend any message (text, photo, or document) and it will be forwarded to the group.\\n\\nWhat would you like to send?', \n              { reply_markup: keyboard });\n              \n          } else if (data.startsWith('admin:view:')) {\n            const page = parseInt(data.split(':')[2]) || 0;\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id);\n            \n            const questionsList = await formatQuestionsList(env.STATE, page);\n            const keyboard: { inline_keyboard: Array<Array<{ text: string; callback_data: string }>> } = {\n              inline_keyboard: []\n            };\n            \n            // Navigation buttons\n            const navRow: Array<{ text: string; callback_data: string }> = [];\n            if (page > 0) {\n              navRow.push({ text: '\u2B05\uFE0F Previous', callback_data: `admin:view:${page - 1}` });\n            }\n            if (questionsList.hasMore) {\n              navRow.push({ text: 'Next \u27A1\uFE0F', callback_data: `admin:view:${page + 1}` });\n            }\n            if (navRow.length > 0) {\n              keyboard.inline_keyboard.push(navRow);\n            }\n            \n            keyboard.inline_keyboard.push([{ text: '\uD83D\uDD19 Back to Management', callback_data: 'admin:manage' }]);\n            \n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, questionsList.text, { reply_markup: keyboard });\n            \n          } else if (data === 'admin:delete_mode') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id);\n            await putJSON(env.STATE, `admin_state:${chatId}`, { mode: 'deleting_question' });\n            \n            const keyboard = {\n              inline_keyboard: [\n                [{ text: '\u274C Cancel', callback_data: 'admin:manage' }]\n              ]\n            };\n            \n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, \n              '\uD83D\uDDD1\uFE0F Delete Question\\n\\nEnter the question number you want to delete (e.g., 1, 2, 3...)\\n\\n\u26A0\uFE0F This action cannot be undone!', \n              { reply_markup: keyboard });\n              \n          } else if (data === 'admin:main') {\n            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, query.id);\n            await putJSON(env.STATE, `admin_state:${chatId}`, { mode: 'normal' });\n            \n            const keyboard = {\n              inline_keyboard: [\n                [{ text: '\uD83D\uDCE4 Upload Questions', callback_data: 'admin:upload' }],\n                [{ text: '\uD83D\uDCDA Manage Questions', callback_data: 'admin:manage' }],\n                [{ text: '\uD83D\uDCE2 Send to Group', callback_data: 'admin:send' }],\n                [{ text: '\uD83D\uDCCA Daily Report', callback_data: 'admin:daily' }],\n                [{ text: '\uD83D\uDCC8 Monthly Report', callback_data: 'admin:monthly' }]\n              ]\n            };\n            \n            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId!, '\uD83E\uDD16 Admin Panel\\n\\nChoose an action:', { reply_markup: keyboard });\n          }\n        }\n        \n        return new Response('OK');\n      } else if (url.pathname === '/tick' && request.method === 'GET') {\n        await ensureKeys(env.STATE);\n        await initializeBotIfNeeded(env.STATE, env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID);\n        await postNext(env.STATE, env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID);\n        return new Response('MCQ posted');\n      } else if (url.pathname === '/start-posting' && request.method === 'GET') {\n        await ensureKeys(env.STATE);\n        await initializeBotIfNeeded(env.STATE, env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID);\n        return new Response('Bot initialized and first MCQ posted');\n      } else if (url.pathname === '/health' && request.method === 'GET') {\n        return new Response('ok');\n      }\n      \n      return new Response('Not Found', { status: 404 });\n    } catch (error) {\n      console.error('Error:', error);\n      return new Response('Internal Server Error', { status: 500 });\n    }\n  },\n  \n  async scheduled(event: ScheduledEvent, env: Env): Promise<void> {\n    try {\n      await ensureKeys(env.STATE);\n      await initializeBotIfNeeded(env.STATE, env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID);\n      await postNext(env.STATE, env.TELEGRAM_BOT_TOKEN, env.TARGET_GROUP_ID);\n    } catch (error) {\n      console.error('Scheduled error:', error);\n    }\n  }\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/workspace/src/worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/workspace/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/workspace/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/workspace/src/worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/workspace/.wrangler/tmp/bundle-edp9We/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/workspace/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/workspace/.wrangler/tmp/bundle-edp9We/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/workspace/.wrangler/tmp/bundle-edp9We/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
